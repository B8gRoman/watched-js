import debugModule from 'debug';
import { createCache } from './cache';

export const debug = debugModule('watched:sdk');

class Config {
  cache = createCache();
  repository = null;
  repositoryAutoGenerated = true;
  addons = {};

  setCache(cache) {
    this.cache = cache;
  }

  setRepository(repository, autoGenerated) {
    if (this.repository && !this.repositoryAutoGenerated) {
      throw new Error('Repository already set');
    }
    this.repository = repository;
    this.repositoryAutoGenerated = autoGenerated;
  }

  registerAddon(addon) {
    if (addon.id === 'repository' || addon.id === 'addons') {
      throw new Error(`Addon ID ${addon.id} for ${addon.type} is forbidden`);
    }
    if (this.addons[addon.id]) {
      throw new Error(`Addon ${addon.id} already exists`);
    }
    this.addons[addon.id] = addon;
  }

  // registerAddon(addon) {
  //   if (
  //     addon.id === 'repository' ||
  //     addon.id === 'addons' ||
  //     (addon.type === 'repository' && !/^[a-z0-9\\-]+$/.test(addon.id)) ||
  //     (addon.type !== 'repository' &&
  //       !/^[a-z0-9\\-]+\.[a-z0-9\\-\\.]+$/.test(addon.id))
  //   ) {
  //     throw new Error(`Addon ID ${addon.id} for ${addon.type} is forbidden`);
  //   }
  //   if (this.addons[addon.id]) {
  //     throw new Error(`Addon ${addon.id} already exists`);
  //   }
  //   this.addons[addon.id] = addon;
  // }
}

export const config = new Config();

export const setCache = config.setCache;
